/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 800  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <zmk-helpers/key-labels/42.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include "zmk-helpers/helper.h"

// Source desired key-position labels

#include "zmk-helpers/key-labels/glove80.h"

// Source unicode-chars for desired languages

#include "zmk-helpers/unicode-chars/german.dtsi"

&sk {
    release-after-ms = <1000>;
    quick-release;
    lazy;
    ignore-modifiers;
};

&mmv {
    acceleration-exponent = <1>;          // 1
    time-to-max-speed-ms = <500>;         // 300
    delay-ms = <0>;                       // 0
};

&lt {
    tapping-term-ms = <200>; // default 200
    flavor = "balanced"; // or hold-preferred or tap-preferred
    quick-tap-ms = <150>;
};

/ {
    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <17 18>;
            layers = <0>;
        };

        esc {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
            layers = <0>;
        };

        vol_up {
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <11 23>;
            layers = <0>;
        };

        combo_vol_down {
            bindings = <&kp C_VOLUME_DOWN>;
            key-positions = <23 35>;
            layers = <0>;
        };

        combo_CAPS_LOCK {
            bindings = <&kp CAPSLOCK>;
            key-positions = <5 6>;
            layers = <0>;
        };

        combo_Delete {
            bindings = <&kp DELETE>;
            key-positions = <10 9>;
            layers = <0>;
        };

        combo_underscore {
            bindings = <&kp UNDER>;
            key-positions = <7 8>;
            layers = <0>;
        };

        combo_dash {
            bindings = <&kp MINUS>;
            key-positions = <4 3>;
            layers = <0>;
        };

        combo_em-dash {
            bindings = <&emdsh>;
            key-positions = <2 3 4>;
            layers = <0>;
        };

        combo_f19 {
            bindings = <&kp F19>;
            key-positions = <1 4 7 10>;
            layers = <0>;
        };

        combo_single-quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <7 19>;
            layers = <0>;
        };

        combo_double-quote {
            bindings = <&kp AT_SIGN>;
            key-positions = <8 20>;
            layers = <0>;
        };
    };

    macros {
        arrow_func: arrow_func {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>, <&macro_press>;

            label = "ARROW_FUNC";
        };

        emdsh: emdsh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp SPACE &kp MINUS &kp MINUS &kp SPACE>,
                <&macro_press>;

            label = "EMDSH";
        };
    };

    behaviors {
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        arrow_func_tap: arrow_func_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "ARROW_FUNC_TAP";
            #binding-cells = <0>;
            bindings = <&kp GREATER_THAN>, <&arrow_func>;
        };

        underspace: underspace {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDERSPACE";
            bindings = <&lt 1 SPACE>, <&kp UNDER>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE  &kp Q         &kp W            &kp F         &kp P              &kp B        &kp J        &kp L               &kp U         &kp Y             &kp COMMA         &kp BACKSPACE
&kp TAB     &bhm LMETA A  &bhm LEFT_ALT R  &bhm LCTRL S  &bhm LEFT_SHIFT T  &kp G        &kp M        &bhm RIGHT_SHIFT N  &bhm RCTRL E  &bhm RIGHT_ALT I  &bhm RIGHT_GUI O  &kp SEMICOLON
&sk LSHFT   &lt 3 Z       &kp X            &kp C         &kp D              &lt 4 V      &lt 7 K      &kp H               &kp COMMA     &kp DOT           &lt 3 SLASH       &kp RIGHT_SHIFT
                                           &kp LCTRL     &lt 6 SPACE        &lt 2 TAB    &lt 6 ENTER  &lt 6 BACKSPACE     &kp RCTRL
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans    &trans    &trans     &trans          &trans    &kp K_REDO  &kp K_PASTE     &kp K_COPY      &kp K_CUT     &kp K_UNDO       &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LEFT_SHIFT  &trans    &mkp MB5    &kp LEFT        &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT        &kp K_CMENU
&trans  &trans    &trans    &trans     &trans          &trans    &mkp MB4    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
                            &trans     &trans          &trans    &mkp MB2    &mkp MB1        &mkp MCLK
            >;
        };

        NAVIGATION {
            bindings = <
&trans       &trans    &trans    &trans     &trans          &trans    &kp K_REDO  &kp K_PASTE    &kp K_COPY      &kp K_CUT     &kp K_UNDO  &trans
&trans       &kp LGUI  &kp LALT  &kp LCTRL  &kp LEFT_SHIFT  &to 8     &kp CAPS    &kp LEFT       &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT   &kp K_CMENU
&bootloader  &trans    &trans    &trans     &trans          &trans    &kp INSERT  &kp HOME       &kp PAGE_DOWN   &kp PAGE_UP   &kp END     &trans
                                 &trans     &trans          &trans    &kp ENTER   &kp BACKSPACE  &kp DELETE
            >;
        };

        BUTTON {
            bindings = <
&trans  &kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE     &kp K_REDO    &kp K_REDO  &kp K_PASTE      &kp K_COPY  &kp K_CUT      &kp K_UNDO  &trans
&trans  &kp LGUI    &kp LALT   &kp LCTRL   &kp LEFT_SHIFT  &trans        &trans      &kp RIGHT_SHIFT  &kp RCTRL   &kp RIGHT_ALT  &kp RGUI    &trans
&trans  &kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE     &kp K_REDO    &kp K_REDO  &kp K_PASTE      &kp K_COPY  &kp K_CUT      &kp K_UNDO  &trans
                               &mkp MB3    &mkp MB1        &mkp MB2      &mkp MB2    &mkp MB1         &mkp MB3
            >;
        };

        MEDIA {
            bindings = <
&trans  &trans    &trans    &trans     &trans          &trans               &kp K_REDO    &kp K_PASTE       &kp K_COPY         &kp K_CUT        &kp K_UNDO    &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LEFT_SHIFT  &ext_power EP_TOG    &bt BT_CLR    &kp K_PREV        &kp K_VOLUME_DOWN  &kp K_VOLUME_UP  &kp K_NEXT    &trans
&trans  &trans    &trans    &trans     &trans          &trans               &out OUT_TOG  &bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 2     &bt BT_SEL 3  &trans
                            &trans     &trans          &trans               &kp K_STOP    &kp K_PLAY_PAUSE  &kp K_MUTE
            >;
        };

        num_layer {
            bindings = <
&trans          &kp LEFT_BRACKET  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp RIGHT_BRACKET    &trans  &trans           &trans             &trans         &trans         &trans
&trans          &kp SEMICOLON     &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp EQUAL            &trans  &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp RIGHT_GUI  &trans
&kp LEFT_SHIFT  &kp NUMBER_1      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp BACKSLASH        &trans  &trans           &trans             &trans         &trans         &bootloader
                                                &kp PERIOD    &kp UNDER     &kp MINUS            &trans  &trans           &trans
            >;
        };

        SYM {
            bindings = <
&trans  &kp GRAVE  &kp AMPERSAND    &kp ASTERISK   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans         &trans
&trans  &kp COLON  &kp DOLLAR       &kp PERCENT    &kp CARET             &kp EQUAL                &kp SLASH       &kp RIGHT_SHIFT  &kp RCTRL         &kp RIGHT_ALT      &kp RIGHT_GUI  &trans
&trans  &kp TILDE  &kp EXCLAMATION  &kp AT_SIGN    &kp HASH              &kp PIPE                 &kp BACKSLASH   &trans           &trans            &trans             &trans         &trans
                                    &kp LESS_THAN  &kp GREATER_THAN      &kp MINUS                &trans          &trans           &trans
            >;
        };

        FUN {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8              &kp F9     &kp PRINTSCREEN    &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans         &trans
&trans  &kp F11  &kp F4  &kp F5              &kp F6     &kp SCROLLLOCK     &kp SLASH       &kp RIGHT_SHIFT  &kp RCTRL         &kp RIGHT_ALT      &kp RIGHT_GUI  &trans
&trans  &kp F10  &kp F1  &kp F2              &kp F3     &kp PAUSE_BREAK    &kp BACKSLASH   &trans           &trans            &trans             &trans         &trans
                         &kp K_CONTEXT_MENU  &kp SPACE  &kp TAB            &trans          &trans           &trans
            >;
        };

        QWERTY {
            bindings = <
&kp ESCAPE      &kp GRAVE     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4    &trans        &trans  &trans  &trans  &trans  &trans
&kp TAB         &kp NUMBER_5  &kp Q         &kp W         &kp E         &kp R           &trans        &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LCTRL     &kp A         &kp S         &kp D         &kp F           &trans        &trans  &trans  &trans  &trans  &trans
                                            &kp LEFT_ALT  &kp G         &kp SPACE       &kp NUMBER_0  &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
